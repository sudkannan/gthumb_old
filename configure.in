dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.52)

AC_INIT(gthumb, 2.10.11, http://bugzilla.gnome.org/enter_bug.cgi?product=gthumb)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AM_CONFIG_HEADER(config.h)

AM_PROG_LIBTOOL
AM_PROG_LEX
AC_PROG_YACC

AC_CONFIG_MACRO_DIR([m4])
GNOME_DOC_INIT

dnl ==========================================================================
dnl
dnl If you add a version number here, you *must* add an AC_SUBST line for
dnl it too, or it will never make it into the spec file!
dnl
dnl ==========================================================================

GLIB_REQUIRED=2.6.0
GTK_REQUIRED=2.10.0
LIBXML_REQUIRED=2.4.0
LIBGNOME_REQUIRED=2.6.0
LIBGNOMEUI_REQUIRED=2.6.0
LIBGNOMECANVAS_REQUIRED=2.6.0
GNOME_VFS_REQUIRED=2.6.0
LIBGLADE_REQUIRED=2.4.0
LIBEXIF_REQUIRED=0.6.13
LIBIPTCDATA_REQUIRED=0.2.1
LIBGPHOTO_REQUIRED=2.1.3
BONOBO_REQUIRED=2.6.0
LIBOPENRAW_REQUIRED=0.0.2

AC_SUBST(GLIB_REQUIRED)
AC_SUBST(GTK_REQUIRED)
AC_SUBST(LIBXML_REQUIRED)
AC_SUBST(LIBGNOME_REQUIRED)
AC_SUBST(LIBGNOMEUI_REQUIRED)
AC_SUBST(LIBGNOMECANVAS_REQUIRED)
AC_SUBST(GNOME_VFS_REQUIRED)
AC_SUBST(LIBGLADE_REQUIRED)
AC_SUBST(LIBEXIF_REQUIRED)
AC_SUBST(LIBIPTCDATA_REQUIRED)
AC_SUBST(LIBGPHOTO_REQUIRED)
AC_SUBST(BONOBO_REQUIRED)
AC_SUBST(LIBOPENRAW_REQUIRED)

AM_PATH_ORBIT2

dnl ===========================================================================

PKG_CHECK_MODULES(GTHUMB,				\
	glib-2.0 >= $GLIB_REQUIRED			\
	gthread-2.0					\
	gmodule-2.0					\
	gtk+-2.0 >= $GTK_REQUIRED			\
	libgnome-2.0 >= $LIBGNOME_REQUIRED		\
	libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED		\
	libgnomecanvas-2.0 >= $LIBGNOMECANVAS_REQUIRED	\
	libbonobo-2.0 >= $BONOBO_REQUIRED		\
	libbonoboui-2.0 >= $BONOBO_REQUIRED		\
	bonobo-activation-2.0 >= $BONOBO_REQUIRED	\
	gnome-vfs-2.0 >= $GNOME_VFS_REQUIRED		\
	gnome-vfs-module-2.0				\
	libexif >= $LIBEXIF_REQUIRED                    \
	libxml-2.0 >= $LIBXML_REQUIRED			\
	libglade-2.0 >= $LIBGLADE_REQUIRED)
AC_SUBST(GTHUMB_LIBS)
AC_SUBST(GTHUMB_CFLAGS)

AC_C_BIGENDIAN
AC_PROG_CPP


#
# Checks for libjpeg
#
AC_MSG_CHECKING(JPEG Support)
AC_MSG_RESULT()

AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,
	     [AC_CHECK_HEADER(jpeglib.h,,[AC_MSG_ERROR([*** JPEG headers not found ***])])],
	     [AC_MSG_ERROR([*** JPEG library not found ***])])

AC_CHECK_LIB(jpeg, jpeg_simple_progression,
	     [AC_DEFINE(HAVE_PROGRESSIVE_JPEG, 1, [Define to 1 if libjpeg supports progressive JPEG.])],
	     [AC_MSG_WARN(JPEG library does not support progressive saving.)])

AC_DEFINE(HAVE_LIBJPEG, 1, [Define to 1 if libjpeg support is included])

JPEG_LIBS='-ljpeg -lm -lz'
AC_SUBST(JPEG_LIBS)


#
# Checks for libtiff
#
AC_ARG_ENABLE([tiff],
	      [AC_HELP_STRING([--disable-tiff],[disable support for tiff])],,
	      [enable_tiff=yes])

HAVE_TIFF=no
if test x$enable_tiff = xyes ; then
   AC_MSG_CHECKING(TIFF Support)
   AC_MSG_RESULT()
   AC_CHECK_LIB(tiff, TIFFWriteScanline,
		[AC_CHECK_HEADER(tiffio.h,
				 AC_DEFINE(HAVE_LIBTIFF, 1, [Define to 1 if libtiff support is included])
				 TIFF_LIBS='-ltiff -lm -lz'
				 HAVE_TIFF=yes
				 ,[AC_MSG_WARN([*** TIFF headers not found ***])])],
		[AC_MSG_WARN([*** TIFF library not found ***])])
   AC_SUBST(TIFF_LIBS)
fi


#
# Checks for Xtest
#
have_xtest=false
XTEST_LIBS=""
AC_CHECK_LIB(Xtst, XTestFakeKeyEvent,
    have_xtest=true,:,-lX11 -lXtst $GTHUMB_LIBS)
if $have_xtest ; then
   XTEST_LIBS="-lX11 -lXtst"
   AC_DEFINE(HAVE_XTEST, 1, [Have XTest])
fi
AC_SUBST(XTEST_LIBS)


#
# Checks for XF86VMODE
#
have_xf86gamma=no
XF86GAMMA_LIBS=""
AC_CHECK_HEADER(X11/extensions/xf86vmode.h,
		[have_xf86gamma=yes],,
		[#include <X11/Xlib.h>])

# if that succeeded, then check for the -lXxf86vm
if test "$have_xf86gamma" = yes; then
  have_xf86gamma=no
  AC_CHECK_LIB(Xxf86vm, XF86VidModeSetGamma,
	       [have_xf86gamma=yes],
	       [true], -lXext -lX11)
fi

# check for the Ramp versions of the functions too.
if test "$have_xf86gamma" = yes; then
  have_xf86gamma_ramp=no
  AC_CHECK_LIB(Xxf86vm, XF86VidModeSetGammaRamp,
	       [have_xf86gamma_ramp=yes],
	       [true], -lXext -lX11)
fi

# if those tests succeeded, then we've really got the functions.
if test "$have_xf86gamma" = yes; then
  XF86GAMMA_LIBS="-lX11 -lXext -lXxf86vm"
  AC_DEFINE(HAVE_XF86VMODE_GAMMA, 1, [Define if XF86VMODE Gamma is available])
fi

if test "$have_xf86gamma_ramp" = yes; then
  AC_DEFINE(HAVE_XF86VMODE_GAMMA_RAMP, 1, [Define if XF86VMODE Gamma Ramp is available])
fi

AC_SUBST(XF86GAMMA_LIBS)

#
# Checks for libiptcdata
#
AC_ARG_ENABLE([iptcdata],
	      [AC_HELP_STRING([--disable-iptcdata],[disable support for iptc data])],,
	      [enable_iptcdata=yes])

HAVE_IPTC=no
if test x$enable_iptcdata = xyes ; then
   AC_MSG_CHECKING(IPTC Data Support)
   IPTCDATA_LIBS=""
   IPTCDATA_CFLAGS=""
   if pkg-config --atleast-version=$LIBIPTCDATA_REQUIRED libiptcdata; then
     HAVE_IPTC="yes"
     IPTCDATA_LIBS=`pkg-config --libs libiptcdata`
     IPTCDATA_CFLAGS=`pkg-config --cflags libiptcdata`
     AC_DEFINE(HAVE_LIBIPTCDATA, 1, [Have libiptcdata])
   fi
   AC_MSG_RESULT($HAVE_IPTC)
fi
AC_SUBST(IPTCDATA_LIBS)
AC_SUBST(IPTCDATA_CFLAGS)

#
# Checks for libgphoto2
#
AC_ARG_ENABLE([gphoto2],
	      [AC_HELP_STRING([--disable-gphoto2],[disable support for libgphoto2])],,
	      [enable_gphoto2=yes])

HAVE_GPHOTO2=no
if test x$enable_gphoto2 = xyes ; then
   PKG_CHECK_MODULES(GPHOTO, libgphoto2 >= $LIBGPHOTO_REQUIRED,
		     [AC_DEFINE(HAVE_LIBGPHOTO, 1, [Define to 1 to enable libgphoto2 support])
		      HAVE_GPHOTO2=yes],
		     [HAVE_GPHOTO2=no])
fi

#
# Checks for libopenraw
#
AC_ARG_ENABLE([libopenraw],
	      [AC_HELP_STRING([--disable-libopenraw],[disable support for libopenraw])],,
	      [enable_libopenraw=yes])
HAVE_LIBOPENRAW=no
if test x$enable_libopenraw = xyes ; then
   PKG_CHECK_MODULES(LIBOPENRAW, libopenraw-gnome-1.0 >= $LIBOPENRAW_REQUIRED,
		     [AC_DEFINE(HAVE_LIBOPENRAW, 1, [Define to 1 to enable libopenraw support])
		      HAVE_LIBOPENRAW=yes],
		     [HAVE_LIBOPENRAW=no])
fi

#
# Checks for GDK X11 support; may not be present on MAC OS / Quartz systems
#
HAVE_GDKX=no
PKG_CHECK_MODULES(GDKX, gdk-x11-2.0,
		  [AC_DEFINE(HAVE_GDKX, 1, [Define to 1 if X11 support is included])
		   HAVE_GDKX=yes],
		  [AC_MSG_WARN(Disabling GDK/X11-dependent features and Xrender.)])

#
# Checks for Xft/XRender
#
AC_ARG_ENABLE([render],
	      [AC_HELP_STRING([--disable-render],[disable support for Xrender])],,
	      [enable_render=yes])

HAVE_RENDER=no
if (test x$enable_render = xyes) && (test $HAVE_GDKX = yes); then
   AC_MSG_CHECKING(Xrender Support)
   AC_MSG_RESULT()
   AC_CHECK_LIB(Xrender, XRenderFindFormat,
                AC_DEFINE(HAVE_RENDER, 1, [Define to 1 if Xft/XRender support is included])
                RENDER_LIBS='-lXrender -lXext'
                HAVE_RENDER=yes
                ,,[-lXext $GTHUMB_LIBS])
   AC_SUBST(RENDER_LIBS)
fi

#
# Checks for Mac OS X menubar integration
#
AC_ARG_ENABLE([macos-menu],
              [AC_HELP_STRING([--disable-macos-menu],[disable support for Mac OS X menubar integration])],,
              [enable_macosmenu=yes])

HAVE_MACOSMENU=no
if test "x$enable_macosmenu" = "xyes"; then
   PKG_CHECK_MODULES(IGE_MAC_INTEGRATION, ige-mac-integration,
                     [AC_DEFINE(USE_MACOSMENU, 1, [Build with Mac OS X menubar integration])
                      HAVE_MACOSMENU=yes],
                     [HAVE_MACOSMENU=no])
fi

AM_CONDITIONAL(USE_IGE_MAC_INTEGRATION, test "x$HAVE_IGE-MAC-INTEGRATION" = "xyes")
AC_SUBST(IGE_MAC_INTEGRATION_CFLAGS)
AC_SUBST(IGE_MAC_INTEGRATION_LIBS)

dnl ###############################################

IDL_MODULES="bonobo-activation-2.0 libbonobo-2.0 libbonoboui-2.0"
IDL_INCLUDES="`$PKG_CONFIG --variable=idldir $IDL_MODULES | $srcdir/add-include-prefix`"
AC_SUBST(IDL_INCLUDES)


dnl ###############################################

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)
AC_PATH_PROG(GLIB_MKENUMS, glib-mkenums)


dnl ###############################################

IT_PROG_INTLTOOL([0.35.0])
GETTEXT_PACKAGE=gthumb
AC_SUBST([GETTEXT_PACKAGE])
AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE],["$GETTEXT_PACKAGE"],[Gettext package])
AM_GLIB_GNU_GETTEXT


if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(LOCALEDIR, "${ac_default_prefix}/${DATADIRNAME}/locale", [Locale directory])
else
  AC_DEFINE_UNQUOTED(LOCALEDIR, "${prefix}/${DATADIRNAME}/locale", [Locale directory])
fi

dnl ******************************

AC_ARG_ENABLE(deprecations,AC_HELP_STRING([--enable-deprecations],[warn about deprecated usages]))

AM_CONDITIONAL(ENABLE_DEPRECATIONS, test "x$enable_deprecations" = xyes)

dnl ******************************

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)
if test x"$GCONFTOOL" = xno; then
	AC_MSG_ERROR([gconftool-2 executable not found in your path - should be
installed with GConf])
fi
AM_GCONF_SOURCE_2

dnl ******************************

AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-cygwin*|*-*-mingw*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = "yes")

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    os_win32=yes
    ;;
  *)
    os_win32=no
    ;;
esac
AC_MSG_RESULT([$os_win32])
AM_CONDITIONAL(OS_WIN32, test "$os_win32" = "yes")

dnl ******************************

if test "$platform_win32" = "yes" ; then
	MODULE_LIBTOOL_FLAGS='-module -avoid-version -no-undefined -Wl,$(top_builddir)/src/.libs/gthumb.exe.a'
else
	MODULE_LIBTOOL_FLAGS='-module -avoid-version'
fi
AC_SUBST(MODULE_LIBTOOL_FLAGS)

AC_OUTPUT([
Makefile
po/Makefile.in
libgthumb/Makefile
libgthumb/cursors/Makefile
libgthumb/icons/Makefile
libgthumb/jpegutils/Makefile
src/Makefile
src/icons/Makefile
doc/Makefile
data/Makefile
data/albumthemes/Makefile
data/albumthemes/BestFit/Makefile
data/albumthemes/Classic/Makefile
data/albumthemes/ClassicClips/Makefile
data/albumthemes/Flicker/Makefile
data/albumthemes/NeatRound/Makefile
data/albumthemes/Wiki/Makefile
data/glade/Makefile
])

echo "

Configuration:

	Source code location:     ${srcdir}
	Compiler:                 ${CC}
	Have gdk-x11:		  ${HAVE_GDKX}
	Have XRender:             ${HAVE_RENDER}
	Have XTest:               ${have_xtest}
	Have XF86VidModeSetGamma: ${have_xf86gamma}
	Have libiptcdata:         ${HAVE_IPTC}
	Have libtiff:             ${HAVE_TIFF}
	Have libgphoto:           ${HAVE_GPHOTO2}
	Have libopenraw:          ${HAVE_LIBOPENRAW}
	Use Mac OS X menu:        ${HAVE_MACOSMENU}

"
